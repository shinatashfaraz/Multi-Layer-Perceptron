# -*- coding: utf-8 -*-
"""Binary-Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fqiOv8KqJrUIgJn5oE2tsyuTj58i6tm5

# Binary Classification
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install ipython-autotime

import time
import numpy as np
from tensorflow.keras.datasets import imdb
from tensorflow.keras import Sequential
from tensorflow.keras import layers

"""## 1- Data preparation"""

(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)

train_data.shape

train_labels[0]

word_index = imdb.get_word_index()

# Commented out IPython magic to ensure Python compatibility.
# %load_ext autotime

def vectorize_sequences(sequences, dimension=10000):
  results = np.zeros((len(sequences), dimension))
  for i, sequence in enumerate(sequences):
    for j in sequence:
      results[i, j] = 1.
  return results

x_train = vectorize_sequences(train_data)
x_test = vectorize_sequences(test_data)

# Commented out IPython magic to ensure Python compatibility.
# %unload_ext autotime

x_train.shape

train_labels.dtype

y_train = np.asarray(train_labels).astype("float32")
y_test = np.asarray(test_labels).astype("float32")

y_train.dtype

"""## 2- Model Design"""

model = Sequential([
    layers.Dense(16, activation='relu', input_shape=(10000,)),
    layers.Dense(16, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

model.summary()

"""## 3- Training"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext autotime

model.compile(optimizer='adam', loss='binary_crossentropy',
              metrics=['accuracy'])

x_val = x_train[:10000]
partial_x_train = x_train[10000:]
y_val = y_train[:10000]
partial_y_train = y_train[10000:]

start = time.time()
history = model.fit(x=partial_x_train, y=partial_y_train,
                    batch_size=512,
                    epochs=20,
                    validation_data=(x_val, y_val))
end = time.time()
print(f'Execution time: {end-start} s')

# Commented out IPython magic to ensure Python compatibility.
# %unload_ext autotime

"""## 4- Evaluation"""

history.history.keys()

import matplotlib.pyplot as plt

losses = history.history['loss']
val_losses = history.history['val_loss']

plt.plot(losses, label='Train loss')
plt.plot(val_losses, label='Validation loss')
plt.legend()
plt.show()

accuracies = history.history['accuracy']
val_accuracies = history.history['val_accuracy']

plt.plot(accuracies, label='Train accuracy')
plt.plot(val_accuracies, label='Validation accuracy')
plt.legend()
plt.show()

model.evaluate(x_test, y_test)

preds = model.predict(x_test)

preds

preds[preds<0.5] = 0
preds[preds>=0.5] = 1
preds

from sklearn.metrics import classification_report

print(classification_report(y_test, preds, target_names=['Negative', 'Positive']))